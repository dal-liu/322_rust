(@main
  (@main
    0 1
    mem rsp 0 <- r12

    mem rsp -8 <- :initArray_return
    call @initArray 0
    :initArray_return
    r12 <- rax

    rdi <- r12
    mem rsp -8 <- :sortArray_return
    call @sortArray 1
    :sortArray_return

    rdi <- r12
    mem rsp -8 <- :printArray_return
    call @printArray 1
    :printArray_return

    r12 <- mem rsp 0
    return
  )
  (@initArray
    0 3
    mem rsp 0 <- r12
    mem rsp 8 <- r13
    mem rsp 16 <- r14

    // assign array length to r12
    call input 0
    r12 <- rax

    // create array and assign pointer to r14
    rdi <- r12
    rsi <- 1
    call allocate 2
    r14 <- rax

    // assign counter = 0 to r13
    r13 <- 1

    :initArray_loop
    cjump r12 = r13 :initArray_exit
      call input 0

      // calculate next free array index
      r10 <- r13
      r10 >>= 1
      r10++
      r10 *= 8
      r10 += r14
      mem r10 0 <- rax

      // increment counter
      r13 += 2
      goto :initArray_loop

    :initArray_exit
    rax <- r14
    r12 <- mem rsp 0
    r13 <- mem rsp 8
    r14 <- mem rsp 16
    return
  )
  (@sortArray
    1 0
    // assign array length - 1 to r10
    r10 <- mem rdi 0
    r10 -= 1
    r10 <<= 1
    r10++

    // loop until r10 reaches 0
    :sortArray_loop1
    cjump r10 <= 0 :sortArray_exit1

      // assign counter = 0 to r11
      r11 <- 1
      :sortArray_loop2
      cjump r11 = r10 :sortArray_exit2
        // assign offset to r9
        r9 <- r11
        r9 >>= 1
        r9++
        r9 *= 8
        // assign array index to r8
        r8 <- rdi
        r8 += r9

        // load numbers at r8 and r8 + 8 to r9 and rcx
        r9 <- mem r8 0
        rcx <- mem r8 8

        // if r9 is at least rcx, then do nothing
        // else, swap
        cjump rcx <= r9 :else
          mem r8 0 <- rcx
          mem r8 8 <- r9
        :else

        r11 += 2
        goto :sortArray_loop2

      :sortArray_exit2
      r10 -= 2
      goto :sortArray_loop1

    :sortArray_exit1
    return
  )
  (@printArray
    1 2
    mem rsp 0 <- r12
    mem rsp 8 <- r13

    r12 <- rdi
    r13 <- 1

    :printArray_loop
    r10 <- mem r12 0
    r10 <<= 1
    r10++
    cjump r10 = r13 :printArray_exit

      r11 <- r13
      r11 >>= 1
      r11++
      r11 *= 8
      r11 += r12
      rdi <- mem r11 0
      call print 1

      r13 += 2
      goto :printArray_loop

    :printArray_exit
    r12 <- mem rsp 0
    r13 <- mem rsp 8
    return
  )
)
