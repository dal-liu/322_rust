(@main
  (@main 0
    mem rsp -8 <- :initArray_return
    call @initArray 0
    :initArray_return
    %arr <- rax

    rdi <- %arr
    mem rsp -8 <- :sortArray_return
    call @sortArray 1
    :sortArray_return

    rdi <- %arr
    mem rsp -8 <- :printArray_return
    call @printArray 1
    :printArray_return
    return
  )
  (@initArray 0
    call input 0
    %len <- rax

    rdi <- %len
    rsi <- 1
    call allocate 2
    %arr <- rax

    %i <- 1

    :initArray_loop
    cjump %i = %len :initArray_exit
      call input 0

      // calculate next free array index
      %loc <- %i
      %loc >>= 1
      %loc ++
      %loc *= 8
      %loc += %arr
      mem %loc 0 <- rax

      // increment counter
      %i += 2
      goto :initArray_loop

    :initArray_exit
    rax <- %arr
    return
  )
  (@sortArray 1
    %i <- mem rdi 0
    %i -= 1
    %i <<= 1
    %i ++

    :sortArray_loop1
    cjump %i <= 0 :sortArray_exit1
      %j <- 1
      :sortArray_loop2
      cjump %i = %j :sortArray_exit2
        %loc <- %j
        %loc >>= 1
        %loc ++
        %loc *= 8

        %arr <- rdi
        %arr += %loc

        %num1 <- mem %arr 0
        %num2 <- mem %arr 8

        // if %num1 is at least %num2, then do nothing. else, swap
        cjump %num2 <= %num1 :else
          mem %arr 0 <- %num2
          mem %arr 8 <- %num1
        :else

        %j += 2
        goto :sortArray_loop2

      :sortArray_exit2
      %i -= 2
      goto :sortArray_loop1

    :sortArray_exit1
    return
  )
  (@printArray 1
    %arr <- rdi
    %i <- 1

    :printArray_loop
    %len <- mem %arr 0
    %len <<= 1
    %len ++
    cjump %i = %len :printArray_exit
      %loc <- %i
      %loc >>= 1
      %loc ++
      %loc *= 8
      %loc += %arr
      rdi <- mem %loc 0
      call print 1

      %i += 2
      goto :printArray_loop

    :printArray_exit
    return
  )
)
